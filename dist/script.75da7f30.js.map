{"version":3,"sources":["storage.js","script.js"],"names":["BOARDS_KEY","getBoards","JSON","parse","localStorage","getItem","saveBoards","boards","setItem","stringify","addBoard","name","find","b","newBoard","pins","push","getBoardByName","board","addPinToBoard","boardName","pin","p","id","_storage","require","_typeof","o","Symbol","iterator","constructor","prototype","_regeneratorRuntime","e","t","r","Object","n","hasOwnProperty","defineProperty","value","i","a","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","_catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","boardSelect","document","getElementById","newBoardInput","createBoardBtn","pinsContainer","querySelector","searchInput","complainModal","complainText","sendComplainBtn","closeComplainBtn","PINS_API_URL","currentPins","currentBoard","actionMenu","renderBoardOptions","innerHTML","opt","createElement","textContent","appendChild","loadPins","_loadPins","_callee","res","_callee$","_context","fetch","json","renderPins","t0","console","error","pinsToShow","searchTerm","trim","toLowerCase","filter","title","includes","el","className","dataset","concat","image","addEventListener","alert","target","classList","add","text","createActionMenu","x","remove","style","top","left","addPinBtn","showBoardSelectionMenu","complainBtn","body","onClickOutside","event","contains","removeEventListener","setTimeout","boardSelectMenu","boardOption","rect","getBoundingClientRect","bottom","stopPropagation","pinEl","closest","src","right"],"mappings":"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","file":"script.75da7f30.js","sourceRoot":"..\\src","sourcesContent":["const BOARDS_KEY = 'pinterest-boards';\r\n\r\nexport function getBoards() {\r\n    return JSON.parse(localStorage.getItem(BOARDS_KEY)) || [];\r\n}\r\n\r\nexport function saveBoards(boards) {\r\n    localStorage.setItem(BOARDS_KEY, JSON.stringify(boards));\r\n}\r\n\r\nexport function addBoard(name) {\r\n    const boards = getBoards();\r\n    if (boards.find(b => b.name === name)) return null; // не создавать дубликат\r\n    const newBoard = { name, pins: [] };\r\n    boards.push(newBoard);\r\n    saveBoards(boards);\r\n    return newBoard;\r\n}\r\n\r\nexport function getBoardByName(name) {\r\n    return getBoards().find(board => board.name === name);\r\n}\r\n\r\nexport function addPinToBoard(boardName, pin) {\r\n    const boards = getBoards();\r\n    const board = boards.find(b => b.name === boardName);\r\n    if (board && !board.pins.find(p => p.id === pin.id)) {\r\n        board.pins.push(pin);\r\n        saveBoards(boards);\r\n    }\r\n}\r\n","import { getBoards, addBoard, getBoardByName, addPinToBoard } from './storage.js';\r\n\r\nconst boardSelect = document.getElementById('boardSelect');\r\nconst newBoardInput = document.getElementById('newBoardName');\r\nconst createBoardBtn = document.getElementById('createBoardBtn');\r\nconst pinsContainer = document.querySelector('.pins-container');\r\nconst searchInput = document.querySelector('.search-input');\r\n\r\nconst complainModal = document.getElementById('complainModal');\r\nconst complainText = document.getElementById('complainText');\r\nconst sendComplainBtn = document.getElementById('sendComplainBtn');\r\nconst closeComplainBtn = document.getElementById('closeComplainBtn');\r\n\r\nconst PINS_API_URL = 'https://681294a3129f6313e20effc5.mockapi.io/api/v1/pins';\r\n\r\nlet currentPins = [];\r\nlet currentBoard = 'all'; // all - показать все пины\r\n\r\n// Меню выбора действий\r\nlet actionMenu = null;\r\n\r\n// Рендер выпадающего списка досок\r\nfunction renderBoardOptions() {\r\n    const boards = getBoards();\r\n    // очищаем, оставляя option all\r\n    boardSelect.innerHTML = `<option value=\"all\">Все пины</option>`;\r\n    boards.forEach(board => {\r\n        const opt = document.createElement('option');\r\n        opt.value = board.name;\r\n        opt.textContent = board.name;\r\n        boardSelect.appendChild(opt);\r\n    });\r\n}\r\n\r\n// Загрузка пинов с mockapi\r\nasync function loadPins() {\r\n    try {\r\n        const res = await fetch(PINS_API_URL);\r\n        const pins = await res.json();\r\n        currentPins = pins;\r\n        renderPins();\r\n    } catch (e) {\r\n        console.error('Ошибка при загрузке пинов:', e);\r\n        pinsContainer.innerHTML = `<p>Не удалось загрузить пины 😢</p>`;\r\n    }\r\n}\r\n\r\n// Рендер пинов с учетом выбранной доски и поиска\r\nfunction renderPins() {\r\n    let pinsToShow = [];\r\n\r\n    if (currentBoard === 'all') {\r\n        pinsToShow = currentPins;\r\n    } else {\r\n        const board = getBoardByName(currentBoard);\r\n        pinsToShow = board ? board.pins : [];\r\n    }\r\n\r\n    const searchTerm = searchInput.value.trim().toLowerCase();\r\n    if (searchTerm) {\r\n        pinsToShow = pinsToShow.filter(pin => pin.title.toLowerCase().includes(searchTerm));\r\n    }\r\n\r\n    pinsContainer.innerHTML = '';\r\n\r\n    if (pinsToShow.length === 0) {\r\n        pinsContainer.innerHTML = '<p>Пины не найдены.</p>';\r\n        return;\r\n    }\r\n\r\n    pinsToShow.forEach(pin => {\r\n        const el = document.createElement('div');\r\n        el.className = 'pin';\r\n        el.dataset.id = pin.id;\r\n        el.innerHTML = `\r\n      <img src=\"${pin.image}\" alt=\"${pin.title}\">\r\n      <div class=\"pin-description\">${pin.title}</div>\r\n      <button class=\"circle-btn\">+</button>\r\n    `;\r\n        pinsContainer.appendChild(el);\r\n    });\r\n}\r\n\r\n// Создание доски\r\ncreateBoardBtn.addEventListener('click', () => {\r\n    const name = newBoardInput.value.trim();\r\n    if (!name) return alert('Введите название доски');\r\n    if (addBoard(name)) {\r\n        renderBoardOptions();\r\n        newBoardInput.value = '';\r\n    } else {\r\n        alert('Доска с таким именем уже существует');\r\n    }\r\n});\r\n\r\n// Обработка выбора доски\r\nboardSelect.addEventListener('change', (e) => {\r\n    currentBoard = e.target.value;\r\n    renderPins();\r\n});\r\n\r\n// Обработка поиска\r\nsearchInput.addEventListener('input', () => {\r\n    renderPins();\r\n});\r\n\r\n// Закрыть модалку жалобы\r\ncloseComplainBtn.addEventListener('click', () => {\r\n    complainModal.classList.add('hidden');\r\n    complainText.value = '';\r\n});\r\n\r\n// Отправить жалобу\r\nsendComplainBtn.addEventListener('click', () => {\r\n    const text = complainText.value.trim();\r\n    if (!text) {\r\n        alert('Пожалуйста, опишите жалобу');\r\n        return;\r\n    }\r\n    alert('Жалоба отправлена: ' + text);\r\n    complainText.value = '';\r\n    complainModal.classList.add('hidden');\r\n});\r\n\r\n// Функция создания меню действий\r\nfunction createActionMenu(x, y, pin) {\r\n    if (actionMenu) {\r\n        actionMenu.remove();\r\n    }\r\n\r\n    actionMenu = document.createElement('div');\r\n    actionMenu.className = 'action-menu';\r\n    actionMenu.style.top = y + 'px';\r\n    actionMenu.style.left = x + 'px';\r\n\r\n    // Кнопка для добавления пина на доску\r\n    const addPinBtn = document.createElement('button');\r\n    addPinBtn.textContent = 'Добавить на доску';\r\n    addPinBtn.addEventListener('click', () => {\r\n        if (currentBoard === 'all') {\r\n            // Показать меню выбора доски, если доска не выбрана\r\n            showBoardSelectionMenu(pin);\r\n        }\r\n    });\r\n    actionMenu.appendChild(addPinBtn);\r\n\r\n    // Кнопка пожаловаться\r\n    const complainBtn = document.createElement('button');\r\n    complainBtn.textContent = 'Пожаловаться';\r\n    complainBtn.addEventListener('click', () => {\r\n        complainModal.classList.remove('hidden');\r\n        actionMenu.remove();\r\n    });\r\n    actionMenu.appendChild(complainBtn);\r\n\r\n    document.body.appendChild(actionMenu);\r\n\r\n    // Клик вне меню — закрыть его\r\n    function onClickOutside(event) {\r\n        if (!actionMenu.contains(event.target)) {\r\n            actionMenu.remove();\r\n            document.removeEventListener('click', onClickOutside);\r\n        }\r\n    }\r\n    setTimeout(() => {\r\n        document.addEventListener('click', onClickOutside);\r\n    }, 0);\r\n}\r\n\r\n// Функция отображения меню для выбора доски\r\nfunction showBoardSelectionMenu(pin) {\r\n    const boardSelectMenu = document.createElement('div');\r\n    boardSelectMenu.className = 'board-select-menu';\r\n\r\n    const boards = getBoards();\r\n    boards.forEach(board => {\r\n        const boardOption = document.createElement('button');\r\n        boardOption.textContent = board.name;\r\n        boardOption.addEventListener('click', () => {\r\n            addPinToBoard(board.name, pin);\r\n            alert(`Пин добавлен в доску \"${board.name}\"`);\r\n            boardSelectMenu.remove(); // Убираем меню после выбора\r\n        });\r\n        boardSelectMenu.appendChild(boardOption);\r\n    });\r\n\r\n    // Добавим меню выбора доски в body\r\n    document.body.appendChild(boardSelectMenu);\r\n\r\n    // Позиционируем меню рядом с кнопкой \"Добавить на доску\"\r\n    const rect = actionMenu.getBoundingClientRect();\r\n    boardSelectMenu.style.top = rect.bottom + 5 + 'px';\r\n    boardSelectMenu.style.left = rect.left + 'px';\r\n\r\n    // Клик вне меню — закрыть его\r\n    function onClickOutside(event) {\r\n        if (!boardSelectMenu.contains(event.target)) {\r\n            boardSelectMenu.remove();\r\n            document.removeEventListener('click', onClickOutside);\r\n        }\r\n    }\r\n    setTimeout(() => {\r\n        document.addEventListener('click', onClickOutside);\r\n    }, 0);\r\n}\r\n\r\n// Обработка клика на кнопку \"+\"\r\npinsContainer.addEventListener('click', (e) => {\r\n    if (!e.target.classList.contains('circle-btn')) return;\r\n\r\n    e.stopPropagation(); // чтобы клик не закрыл меню сразу\r\n\r\n    const pinEl = e.target.closest('.pin');\r\n    const pin = {\r\n        id: pinEl.dataset.id,\r\n        title: pinEl.querySelector('.pin-description').textContent,\r\n        image: pinEl.querySelector('img').src\r\n    };\r\n\r\n    // Позиция для меню\r\n    const rect = e.target.getBoundingClientRect();\r\n    createActionMenu(rect.right + 5, rect.top, pin);\r\n});\r\n\r\n// Инициализация\r\nrenderBoardOptions();\r\nloadPins();\r\n"]}