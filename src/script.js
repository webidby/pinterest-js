import { getBoards, addBoard, getBoardByName, addPinToBoard } from './storage.js';

const boardSelect = document.getElementById('boardSelect');
const newBoardInput = document.getElementById('newBoardName');
const createBoardBtn = document.getElementById('createBoardBtn');
const pinsContainer = document.querySelector('.pins-container');
const searchInput = document.querySelector('.search-input');

const complainModal = document.getElementById('complainModal');
const complainText = document.getElementById('complainText');
const sendComplainBtn = document.getElementById('sendComplainBtn');
const closeComplainBtn = document.getElementById('closeComplainBtn');

const PINS_API_URL = 'https://681294a3129f6313e20effc5.mockapi.io/api/v1/pins';

let currentPins = [];
let currentBoard = 'all'; // all - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø–∏–Ω—ã

// –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π
let actionMenu = null;

// –†–µ–Ω–¥–µ—Ä –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–æ—Å–æ–∫
function renderBoardOptions() {
    const boards = getBoards();
    // –æ—á–∏—â–∞–µ–º, –æ—Å—Ç–∞–≤–ª—è—è option all
    boardSelect.innerHTML = `<option value="all">–í—Å–µ –ø–∏–Ω—ã</option>`;
    boards.forEach(board => {
        const opt = document.createElement('option');
        opt.value = board.name;
        opt.textContent = board.name;
        boardSelect.appendChild(opt);
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∏–Ω–æ–≤ —Å mockapi
async function loadPins() {
    try {
        const res = await fetch(PINS_API_URL);
        const pins = await res.json();
        currentPins = pins;
        renderPins();
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∏–Ω–æ–≤:', e);
        pinsContainer.innerHTML = `<p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–∏–Ω—ã üò¢</p>`;
    }
}

// –†–µ–Ω–¥–µ—Ä –ø–∏–Ω–æ–≤ —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–æ—Å–∫–∏ –∏ –ø–æ–∏—Å–∫–∞
function renderPins() {
    let pinsToShow = [];

    if (currentBoard === 'all') {
        pinsToShow = currentPins;
    } else {
        const board = getBoardByName(currentBoard);
        pinsToShow = board ? board.pins : [];
    }

    const searchTerm = searchInput.value.trim().toLowerCase();
    if (searchTerm) {
        pinsToShow = pinsToShow.filter(pin => pin.title.toLowerCase().includes(searchTerm));
    }

    pinsContainer.innerHTML = '';

    if (pinsToShow.length === 0) {
        pinsContainer.innerHTML = '<p>–ü–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</p>';
        return;
    }

    pinsToShow.forEach(pin => {
        const el = document.createElement('div');
        el.className = 'pin';
        el.dataset.id = pin.id;
        el.innerHTML = `
      <img src="${pin.image}" alt="${pin.title}">
      <div class="pin-description">${pin.title}</div>
      <button class="circle-btn">+</button>
    `;
        pinsContainer.appendChild(el);
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏
createBoardBtn.addEventListener('click', () => {
    const name = newBoardInput.value.trim();
    if (!name) return alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å–∫–∏');
    if (addBoard(name)) {
        renderBoardOptions();
        newBoardInput.value = '';
    } else {
        alert('–î–æ—Å–∫–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ—Å–∫–∏
boardSelect.addEventListener('change', (e) => {
    currentBoard = e.target.value;
    renderPins();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
searchInput.addEventListener('input', () => {
    renderPins();
});

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É –∂–∞–ª–æ–±—ã
closeComplainBtn.addEventListener('click', () => {
    complainModal.classList.add('hidden');
    complainText.value = '';
});

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É
sendComplainBtn.addEventListener('click', () => {
    const text = complainText.value.trim();
    if (!text) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –∂–∞–ª–æ–±—É');
        return;
    }
    alert('–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ' + text);
    complainText.value = '';
    complainModal.classList.add('hidden');
});

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
function createActionMenu(x, y, pin) {
    if (actionMenu) {
        actionMenu.remove();
    }

    actionMenu = document.createElement('div');
    actionMenu.className = 'action-menu';
    actionMenu.style.top = y + 'px';
    actionMenu.style.left = x + 'px';

    // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∏–Ω–∞ –Ω–∞ –¥–æ—Å–∫—É
    const addPinBtn = document.createElement('button');
    addPinBtn.textContent = '–î–æ–±–∞–≤–∏—Ç—å –Ω–∞ –¥–æ—Å–∫—É';
    addPinBtn.addEventListener('click', () => {
        if (currentBoard === 'all') {
            // –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–æ—Å–∫–∏, –µ—Å–ª–∏ –¥–æ—Å–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
            showBoardSelectionMenu(pin);
        }
    });
    actionMenu.appendChild(addPinBtn);

    // –ö–Ω–æ–ø–∫–∞ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è
    const complainBtn = document.createElement('button');
    complainBtn.textContent = '–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è';
    complainBtn.addEventListener('click', () => {
        complainModal.classList.remove('hidden');
        actionMenu.remove();
    });
    actionMenu.appendChild(complainBtn);

    document.body.appendChild(actionMenu);

    // –ö–ª–∏–∫ –≤–Ω–µ –º–µ–Ω—é ‚Äî –∑–∞–∫—Ä—ã—Ç—å –µ–≥–æ
    function onClickOutside(event) {
        if (!actionMenu.contains(event.target)) {
            actionMenu.remove();
            document.removeEventListener('click', onClickOutside);
        }
    }
    setTimeout(() => {
        document.addEventListener('click', onClickOutside);
    }, 0);
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ—Å–∫–∏
function showBoardSelectionMenu(pin) {
    const boardSelectMenu = document.createElement('div');
    boardSelectMenu.className = 'board-select-menu';

    const boards = getBoards();
    boards.forEach(board => {
        const boardOption = document.createElement('button');
        boardOption.textContent = board.name;
        boardOption.addEventListener('click', () => {
            addPinToBoard(board.name, pin);
            alert(`–ü–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥–æ—Å–∫—É "${board.name}"`);
            boardSelectMenu.remove(); // –£–±–∏—Ä–∞–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
        });
        boardSelectMenu.appendChild(boardOption);
    });

    // –î–æ–±–∞–≤–∏–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–æ—Å–∫–∏ –≤ body
    document.body.appendChild(boardSelectMenu);

    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –º–µ–Ω—é —Ä—è–¥–æ–º —Å –∫–Ω–æ–ø–∫–æ–π "–î–æ–±–∞–≤–∏—Ç—å –Ω–∞ –¥–æ—Å–∫—É"
    const rect = actionMenu.getBoundingClientRect();
    boardSelectMenu.style.top = rect.bottom + 5 + 'px';
    boardSelectMenu.style.left = rect.left + 'px';

    // –ö–ª–∏–∫ –≤–Ω–µ –º–µ–Ω—é ‚Äî –∑–∞–∫—Ä—ã—Ç—å –µ–≥–æ
    function onClickOutside(event) {
        if (!boardSelectMenu.contains(event.target)) {
            boardSelectMenu.remove();
            document.removeEventListener('click', onClickOutside);
        }
    }
    setTimeout(() => {
        document.addEventListener('click', onClickOutside);
    }, 0);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "+"
pinsContainer.addEventListener('click', (e) => {
    if (!e.target.classList.contains('circle-btn')) return;

    e.stopPropagation(); // —á—Ç–æ–±—ã –∫–ª–∏–∫ –Ω–µ –∑–∞–∫—Ä—ã–ª –º–µ–Ω—é —Å—Ä–∞–∑—É

    const pinEl = e.target.closest('.pin');
    const pin = {
        id: pinEl.dataset.id,
        title: pinEl.querySelector('.pin-description').textContent,
        image: pinEl.querySelector('img').src
    };

    // –ü–æ–∑–∏—Ü–∏—è –¥–ª—è –º–µ–Ω—é
    const rect = e.target.getBoundingClientRect();
    createActionMenu(rect.right + 5, rect.top, pin);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
renderBoardOptions();
loadPins();
